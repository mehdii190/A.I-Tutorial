import numpy as npimport pandas as pdfrom sklearn.model_selection import train_test_splitfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.metrics import accuracy_scorefrom sklearn import treeimport matplotlib.pyplot as pltbalance_data = pd.read_csv("/Users/mehdimirawa/Desktop/video IA/Decision_Tree_ Dataset.csv")########print(balance_data.shape)print(balance_data.head())########x = balance_data.values[:,0:4]x = pd.DataFrame(x,dtype="float32")y = balance_data.values[:,5]y = pd.DataFrame(y)x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=100)clf_entropy = DecisionTreeClassifier(criterion="entropy")clf_entropy.fit(x_train,y_train)ypred = clf_entropy.predict(x_test)print("Accuracy: ", accuracy_score(y_test,ypred)*100)#############tree.plot_tree(clf_entropy, class_names=True)class_names=["yes","no"]#tree.plot_tree(clf_entropy,class_names=class_names,fontsize=10)plt.figure(figsize=(25,25))tree.plot_tree(clf_entropy, class_names=class_names,fontsize=10)plt.show()concat = pd.concat([x_train,y_train],axis=1,ignore_index=True)x_1 = concat[concat[1]<=11566.5]print("its 1: \n",x_1[4].value_counts())print("its 2: \n",x_1[x_1[4]=="No"])x_3=x_1[x_1[3]<=4996]print("its 3: \n",x_3[4].value_counts())